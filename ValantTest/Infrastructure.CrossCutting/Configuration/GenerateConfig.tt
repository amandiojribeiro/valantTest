<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="Microsoft.VisualBasic" #>
<#@ template language="VB" debug="True" hostspecific="True"  #>
<#@ output extension=".Generated.cs" #>
<#
 
	Dim projectNamespace as String = "ValantTest.Infrastructure.CrossCutting.Configuration"
	Dim className as String = "Settings"
	Dim fileName as String = "..\..\ValantTest\ApplicationSettings.config"
	Dim keysEnumName as String = "SettingsKeys"

 Init(fileName)  

#>
//------------------------------------------------------------------------------
// FileName = <#= path #>
// Generated at <#= Now.ToLocaltime() #>
//
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//    NOTE: Please use the Add a Reference to System.Configuration assembly if 
//          you get compile errors with ConfigurationManager
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Specialized;
using System.Configuration;

namespace <#= projectNamespace #>
{
	using System.Diagnostics.CodeAnalysis;

 /// <remarks>
 /// You can create partial class with the same name in another file to add custom properties
 /// </remarks>
 [ExcludeFromCodeCoverage]
 public static partial class <#= className #> 
 {

<#= RenderApplicationSettings(path) #>  

 }

 /// <remarks>
 /// You can create partial class with the same name in another file to add custom properties
 /// </remarks>
 public enum <#= keysEnumName #> 
 {

<#= RenderEnumSettings(path) #>  

 }
}

<#+ 
 Dim path as String = ""
 Dim doc as XDocument = Nothing

 Public Sub Init(fileName as String)
  Try
   path = Host.ResolvePath(fileName)
   If File.Exists(path) Then
	doc = XDocument.Load(path)
   End If
  Catch
   path = "<< App.config or Web.config not found within the project >>"
  End Try     
 End Sub

 Public Function GetPropertyReturn(ByVal propertyName as String) as String                 
  If doc Is Nothing Then Return ""

  dim currKey as string = ""
  Dim sb as New StringBuilder()
  
  For Each result as XElement in doc...<appSettings>.<add>   
   currKey = IIf(result.@key.contains(".") , result.@key.replace(".","_"), result.@key)  
	  sb.Append(vbTab).Append(vbTab).Append(vbTab)
	sb.AppendFormat("Return {0};", GetConverter(result.@value, result.@key))
	sb.AppendLine()
  Next
  
  Return sb.ToString()

 End Function

 Public Function RenderEnumSettings(ByVal path as String) as String
  If doc Is Nothing Then Return ""

  Dim sb as New StringBuilder()       

  For Each result as XElement in doc...<appSettings>.<add>    
   dim key = IIf(result.@key.contains("."), result.@key.replace(".","_"), result.@key)
   key = IIf(key.contains(":"), key.replace(":","_"), key)

   sb.AppendFormat("{0},", key).AppendLine()
  Next

  Return sb.ToString().Remove(0,1)

 End Function

 
 Public Function RenderApplicationSettings(ByVal path as String) as String
  If doc Is Nothing Then Return ""

  Dim sb as New StringBuilder()       

  For Each result as XElement in doc...<appSettings>.<add>    
   dim key = IIf(result.@key.contains("."), result.@key.replace(".","_"), result.@key)
   key = IIf(key.contains(":"), key.replace(":","_"), key)

  
   sb.Append(vbTab).Append(vbTab)
   sb.Append("/// <summary>").AppendLine()
   sb.Append(vbTab).Append(vbTab)
   sb.AppendFormat("/// {0} configuration value", key).AppendLine()            
   sb.Append(vbTab).Append(vbTab)
   sb.Append("/// </summary>").AppendLine()
   sb.Append(vbTab).Append(vbTab)
   sb.AppendFormat("public static {0} {1} ", GetPropertyType(result.@value), key).AppendLine()
   sb.Append(vbTab).Append(vbTab)
   sb.AppendLine("{")   
   sb.Append(vbTab).Append(vbTab).Append(vbTab)
   sb.AppendLine("get")
   sb.Append(vbTab).Append(vbTab).Append(vbTab)
   sb.AppendLine("{")   
   sb.Append(vbTab).Append(vbTab).Append(vbTab).Append(vbTab)
   sb.AppendFormat("return {0};", GetConverter(result.@value, result.@key)).AppendLine()
   sb.Append(vbTab).Append(vbTab).Append(vbTab)
   sb.AppendLine("}") 
   sb.Append(vbTab).Append(vbTab)
   sb.AppendLine("}") 
   sb.AppendLine().AppendLine()
  Next

  Return sb.ToString()

 End Function

 Public Shared Function GetConverter(ByVal prop as String, ByVal setting as String) as String     
  If IsNumeric(prop) andalso CountCharacter(prop,".") < 2 andalso long.parse(prop) < 2147483647 Then Return String.Format("Convert.ToInt32(ConfigurationManager.AppSettings[""{0}""])", setting)
  If IsDate(prop) Then Return  String.Format("DateTime.ParseExact(ConfigurationManager.AppSettings[""{0}""], ""dd-MM-yyyy"", null)", setting) 
  dim b as Boolean
  If Boolean.TryParse(prop, b) Then Return  String.Format("Convert.ToBoolean(ConfigurationManager.AppSettings[""{0}""])", setting)       
  Return String.Format("ConfigurationManager.AppSettings[""{0}""]", setting)
 End Function

 Public Shared Function GetPropertyType(ByVal prop as String) as String
  If IsNumeric(prop) andalso CountCharacter(prop,".") < 2 andalso long.parse(prop) < 2147483647 Then Return "int"
  If IsDate(prop) Then Return "DateTime"
  dim b as Boolean
  If Boolean.TryParse(prop, b) Then Return "bool"
  Return "string"
 End Function

 Public shared Function CountCharacter(ByVal value As String, ByVal ch As Char) As Integer
   Dim cnt As Integer = 0
   For Each c As Char In value
  If c = ch Then cnt += 1
   Next
   Return cnt
 End Function

#>